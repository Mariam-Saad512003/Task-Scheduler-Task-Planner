declare
% Task Representation
proc {CreateTask ID Description DueDate Priority Status Task}
   Task = task(id: ID description: Description dueDate: DueDate priority: Priority status: Status)
end

% Task Management
TaskList = {NewCell nil} % Initialize an empty task list

% Add Task
proc {AddTask TaskListCell ID Description DueDate Priority Status}
   local
      Task CurrentTaskList
   in
      {CreateTask ID Description DueDate Priority Status Task}
      CurrentTaskList = @TaskListCell
      TaskListCell := Task | CurrentTaskList
   end
end

% Update Task
proc {UpdateTask TaskListCell TaskID UpdateFunc}
   local
      CurrentTaskList UpdatedTaskList UpdatedTask
   in
      CurrentTaskList = @TaskListCell
      UpdatedTaskList = nil
      for Task in CurrentTaskList do
         if Task.id == TaskID then
            UpdatedTask = {UpdateFunc Task}
            UpdatedTaskList = UpdatedTask | UpdatedTaskList
         else
            UpdatedTaskList = Task | UpdatedTaskList
         end
      end
      TaskListCell := {Reverse UpdatedTaskList}
   end
end

% Delete Task
proc {DeleteTask TaskListCell TaskID}
   local
      CurrentTaskList FilteredTaskList
   in
      CurrentTaskList = @TaskListCell
      FilteredTaskList = nil
      for Task in CurrentTaskList do
         if Task.id \= TaskID then
            FilteredTaskList = Task | FilteredTaskList
         end
      end
      TaskListCell := {Reverse FilteredTaskList}
   end
end

% Notifications: Display Overdue Tasks
proc {DisplayOverdueTasks TaskListCell}
   local
      CurrentTaskList
   in
      CurrentTaskList = @TaskListCell
      {Browse "Overdue Tasks:"}
      for Task in CurrentTaskList do
         if Task.status == "Overdue" then
            {Browse Task}
         end
      end
   end
end

% Persistence: Save to and Load from File (manual serialization)
proc {SaveTasksToFile TaskListCell FileName}
   local
      CurrentTaskList FileStream
   in
      CurrentTaskList = @TaskListCell
      FileStream = {Open.file FileName write}
      for Task in CurrentTaskList do
         {FileStream write Task#'\n'}
      end
      {FileStream close}
   end
end

proc {LoadTasksFromFile FileName TaskListCell}
   local
      FileStream Line Tasks
   in
      FileStream = {Open.file FileName read}
      Tasks = nil
      for Line in {FileStream readAll} do
         Tasks = {Value.read Line} | Tasks
      end
      TaskListCell := {Reverse Tasks}
   end
end

% Test Code
% Adding tasks
{AddTask TaskList 1 "Task1" "2024-12-3" 1 "Pending"}
{AddTask TaskList 2 "Task2" "2024-12-5" 2 "Pending"}
{AddTask TaskList 3 "Task3" "2024-12-1" 3 "Overdue"}

% Display overdue tasks
{DisplayOverdueTasks TaskList}

% Save tasks to file
{SaveTasksToFile TaskList "tasks.txt"}

% Load tasks from file
declare LoadedTaskList = {NewCell nil}
{LoadTasksFromFile "tasks.txt" LoadedTaskList}
{Browse @LoadedTaskList}
